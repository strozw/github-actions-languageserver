import { Lexer, Parser } from "@actions/expressions";
import { isBasicExpression, isString } from "@actions/workflow-parser";
import { ErrorPolicy } from "@actions/workflow-parser/model/convert";
import { splitAllowedContext } from "@actions/workflow-parser/templates/allowed-context";
import { TemplateToken } from "@actions/workflow-parser/templates/tokens/template-token";
import { DiagnosticSeverity } from "vscode-languageserver-types";
import { Mode, getContext } from "./context-providers/default";
import { getWorkflowContext } from "./context/workflow-context";
import { wrapDictionary } from "./expression-validation/error-dictionary";
import { ValidationEvaluator } from "./expression-validation/evaluator";
import { validatorFunctions } from "./expression-validation/functions";
import { error } from "./log";
import { findToken } from "./utils/find-token";
import { mapRange } from "./utils/range";
import { fetchOrConvertWorkflowTemplate, fetchOrParseWorkflow } from "./utils/workflow-cache";
import { validateAction } from "./validate-action";
import { ValueProviderKind } from "./value-providers/config";
import { defaultValueProviders } from "./value-providers/default";
/**
 * Validates a workflow file
 *
 * @param textDocument Document to validate
 * @returns Array of diagnostics
 */
export async function validate(textDocument, config) {
    const file = {
        name: textDocument.uri,
        content: textDocument.getText()
    };
    const diagnostics = [];
    try {
        const result = fetchOrParseWorkflow(file, textDocument.uri);
        if (!result) {
            return [];
        }
        if (result.value) {
            // Errors will be updated in the context. Attempt to do the conversion anyway in order to give the user more information
            const template = await fetchOrConvertWorkflowTemplate(result.context, result.value, textDocument.uri, config, {
                fetchReusableWorkflowDepth: config?.fileProvider ? 1 : 0,
                errorPolicy: ErrorPolicy.TryConversion
            });
            // Validate expressions and value providers
            await additionalValidations(diagnostics, textDocument.uri, template, result.value, config);
        }
        // For now map parser errors directly to diagnostics
        for (const error of result.context.errors.getErrors()) {
            const range = mapRange(error.range);
            diagnostics.push({
                message: error.rawMessage,
                range
            });
        }
    }
    catch (e) {
        error(`Unhandled error while validating: ${e.message}`);
    }
    return diagnostics;
}
async function additionalValidations(diagnostics, documentUri, template, root, config) {
    for (const [parent, token, key] of TemplateToken.traverse(root)) {
        // If  the token is a value in a pair, use the key definition for validation
        // If the token has a parent (map, sequence, etc), use this definition for validation
        const validationToken = key || parent || token;
        const validationDefinition = validationToken.definition;
        // If this is an expression, validate it
        if (isBasicExpression(token) && token.range) {
            await validateExpression(diagnostics, token, validationToken.definitionInfo?.allowedContext || [], config?.contextProviderConfig, getProviderContext(documentUri, template, root, token.range));
        }
        if (token.definition?.key === "regular-step" && token.range) {
            const context = getProviderContext(documentUri, template, root, token.range);
            await validateAction(diagnostics, token, context.step, config);
        }
        // Allowed values coming from the schema have already been validated. Only check if
        // a value provider is defined for a token and if it is, validate the values match.
        if (token.range && validationDefinition) {
            const defKey = validationDefinition.key;
            if (defKey === "step-with") {
                // Action inputs should be validated already in validateAction
                continue;
            }
            if (defKey === "workflow-job-with") {
                // Reusable workflow job inputs are validated by the parser
                continue;
            }
            // Try a custom value provider first
            let valueProvider = config?.valueProviderConfig?.[defKey];
            if (!valueProvider) {
                // fall back to default
                valueProvider = defaultValueProviders[defKey];
            }
            if (valueProvider) {
                const customValues = await valueProvider.get(getProviderContext(documentUri, template, root, token.range));
                const caseInsensitive = valueProvider.caseInsensitive ?? false;
                const customValuesMap = new Set(customValues.map(x => (caseInsensitive ? x.label.toLowerCase() : x.label)));
                if (isString(token)) {
                    if (!customValuesMap.has(caseInsensitive ? token.value.toLowerCase() : token.value)) {
                        invalidValue(diagnostics, token, valueProvider.kind);
                    }
                }
            }
        }
    }
}
function invalidValue(diagnostics, token, kind) {
    switch (kind) {
        case ValueProviderKind.AllowedValues:
            diagnostics.push({
                message: `Value '${token.value}' is not valid`,
                severity: DiagnosticSeverity.Error,
                range: mapRange(token.range)
            });
            break;
        // no messages for SuggestedValues
    }
}
function getProviderContext(documentUri, template, root, tokenRange) {
    const { path } = findToken({
        line: tokenRange.start.line - 1,
        character: tokenRange.start.column - 1
    }, root);
    return getWorkflowContext(documentUri, template, path);
}
async function validateExpression(diagnostics, token, allowedContext, contextProviderConfig, workflowContext) {
    // Validate the expression
    for (const expression of token.originalExpressions || [token]) {
        const { namedContexts, functions } = splitAllowedContext(allowedContext);
        let expr;
        try {
            const l = new Lexer(expression.expression);
            const lr = l.lex();
            const p = new Parser(lr.tokens, namedContexts, functions);
            expr = p.parse();
        }
        catch {
            // Ignore any error here, we should've caught this earlier in the parsing process
            continue;
        }
        const context = await getContext(namedContexts, contextProviderConfig, workflowContext, Mode.Validation);
        const e = new ValidationEvaluator(expr, wrapDictionary(context), validatorFunctions);
        e.validate();
        diagnostics.push(...e.errors.map(e => ({
            message: e.message,
            range: mapRange(expression.range),
            severity: e.severity === "error" ? DiagnosticSeverity.Error : DiagnosticSeverity.Warning
        })));
    }
}
//# sourceMappingURL=validate.js.map