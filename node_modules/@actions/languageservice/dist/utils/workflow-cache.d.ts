import { ParseWorkflowResult, WorkflowTemplate } from "@actions/workflow-parser";
import { WorkflowTemplateConverterOptions } from "@actions/workflow-parser/model/convert";
import { TemplateContext } from "@actions/workflow-parser/templates/template-context";
import { TemplateToken } from "@actions/workflow-parser/templates/tokens/template-token";
import { File } from "@actions/workflow-parser/workflows/file";
import { CompletionConfig } from "../complete";
export declare function clearCacheEntry(uri: string): void;
export declare function clearCache(): void;
/**
 * Parses a workflow file and caches the result
 * @param transformed Indicates whether the workflow has been transformed before parsing
 * @returns the {@link ParseWorkflowResult}
 */
export declare function fetchOrParseWorkflow(file: File, uri: string, transformed?: boolean): ParseWorkflowResult;
/**
 * Converts a workflow template and caches the result
 * @param transformed Indicates whether the workflow has been transformed before parsing
 * @returns the converted {@link WorkflowTemplate}
 */
export declare function fetchOrConvertWorkflowTemplate(context: TemplateContext, template: TemplateToken, uri: string, config?: CompletionConfig, options?: WorkflowTemplateConverterOptions, transformed?: boolean): Promise<WorkflowTemplate>;
//# sourceMappingURL=workflow-cache.d.ts.map