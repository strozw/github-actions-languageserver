import { data, isDescriptionDictionary } from "@actions/expressions";
import { isDictionary } from "@actions/expressions/data/dictionary";
export class AccessError extends Error {
    constructor(message, keyName) {
        super(message);
        this.keyName = keyName;
    }
}
export class ErrorDictionary extends data.Dictionary {
    constructor(...pairs) {
        super(...pairs);
        this.complete = true;
    }
    get(key) {
        const value = super.get(key);
        if (value) {
            return value;
        }
        if (this.complete) {
            throw new AccessError(`Invalid context access: ${key}`, key);
        }
    }
}
export function wrapDictionary(d) {
    const e = new ErrorDictionary();
    if (isDescriptionDictionary(d)) {
        e.complete = d.complete;
    }
    for (const { key, value } of d.pairs()) {
        if (isDictionary(value)) {
            e.add(key, wrapDictionary(value));
        }
        else {
            e.add(key, value);
        }
    }
    return e;
}
//# sourceMappingURL=error-dictionary.js.map