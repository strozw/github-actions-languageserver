import { isBasicExpression } from "@actions/workflow-parser/templates/tokens/type-guards";
import { mapRange } from "../utils/range";
import { posWithinRange } from "./pos-range";
export function mapToExpressionPos(token, position) {
    const pos = {
        line: position.line + 1,
        column: position.character + 1
    };
    if (!isBasicExpression(token)) {
        return undefined;
    }
    if (token.originalExpressions?.length) {
        for (const originalExp of token.originalExpressions) {
            // Find the original expression that contains the position
            if (originalExp.expressionRange && posWithinRange(pos, originalExp.expressionRange)) {
                const exprRange = mapRange(originalExp.expressionRange);
                return {
                    expression: originalExp.expression,
                    // Adjust the position to point into the expression
                    position: {
                        line: pos.line - exprRange.start.line - 1,
                        column: pos.column - exprRange.start.character - 1
                    },
                    documentRange: exprRange
                };
            }
        }
        return undefined;
    }
    const exprRange = mapRange(token.expressionRange);
    return {
        expression: token.expression,
        // Adjust the position to point into the expression
        position: {
            line: pos.line - exprRange.start.line - 1,
            column: pos.column - exprRange.start.character - 1
        },
        documentRange: exprRange
    };
}
//# sourceMappingURL=expression-pos.js.map