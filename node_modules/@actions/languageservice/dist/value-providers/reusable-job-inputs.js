import { isMapping, isString } from "@actions/workflow-parser/templates/tokens/type-guards";
export function reusableJobInputs(context) {
    if (!context.reusableWorkflowJob?.["input-definitions"]) {
        return [];
    }
    const values = [];
    for (const { key, value } of context.reusableWorkflowJob["input-definitions"]) {
        if (!isString(key)) {
            continue;
        }
        values.push({
            label: key.value,
            description: inputDescription(value),
            insertText: `${key.value}: `
        });
    }
    return values;
}
function inputDescription(inputDef) {
    if (!isMapping(inputDef)) {
        return undefined;
    }
    const descriptionToken = inputDef.find("description");
    if (!descriptionToken || !isString(descriptionToken)) {
        return undefined;
    }
    return descriptionToken.value;
}
//# sourceMappingURL=reusable-job-inputs.js.map