import { isMapping, isString } from "@actions/workflow-parser/templates/tokens/type-guards";
export function reusableJobSecrets(context, existingValues) {
    if (!context.reusableWorkflowJob) {
        return [];
    }
    const values = [];
    const inheritSecrets = context.reusableWorkflowJob["inherit-secrets"];
    if (inheritSecrets) {
        return values;
    }
    // Suggest inherit if no other secrets have been set
    if (!existingValues || existingValues.size === 0) {
        values.push({
            label: "inherit"
        });
    }
    if (context.reusableWorkflowJob?.["secret-definitions"]) {
        for (const { key, value } of context.reusableWorkflowJob["secret-definitions"]) {
            if (!isString(key)) {
                continue;
            }
            values.push({
                label: key.value,
                description: secretDescription(value),
                insertText: `${key.value}: `
            });
        }
    }
    return values;
}
function secretDescription(secretDef) {
    if (!isMapping(secretDef)) {
        return "";
    }
    const descriptionToken = secretDef.find("description");
    if (!descriptionToken || !isString(descriptionToken)) {
        return "";
    }
    return descriptionToken.value;
}
//# sourceMappingURL=reusable-job-secrets.js.map