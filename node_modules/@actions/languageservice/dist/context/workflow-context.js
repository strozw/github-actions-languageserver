import { isMapping, isSequence } from "@actions/workflow-parser";
import { isJob, isReusableWorkflowJob } from "@actions/workflow-parser/model/type-guards";
export function getWorkflowContext(uri, template, tokenPath) {
    const context = { uri: uri, template };
    if (!template) {
        return context;
    }
    let stepsSequence = undefined;
    let stepToken = undefined;
    // Iterate through the token path to find the job and step
    for (const token of tokenPath) {
        switch (token.definition?.key) {
            case "job": {
                const jobID = token.value;
                const job = template.jobs.find(job => job.id.value === jobID);
                if (!job) {
                    break;
                }
                if (isJob(job)) {
                    context.job = job;
                }
                else if (isReusableWorkflowJob(job)) {
                    context.reusableWorkflowJob = job;
                }
                break;
            }
            case "steps": {
                if (isSequence(token)) {
                    stepsSequence = token;
                }
                break;
            }
            case "regular-step":
            case "run-step": {
                if (isMapping(token)) {
                    stepToken = token;
                }
                break;
            }
        }
    }
    if (context.job && isJob(context.job)) {
        context.step = findStep(context.job.steps, stepsSequence, stepToken);
    }
    return context;
}
function findStep(steps, stepSequence, stepToken) {
    if (!steps || !stepSequence || !stepToken) {
        return undefined;
    }
    // Steps may not define an ID, so find the step by index
    let stepIndex = -1;
    for (let i = 0; i < stepSequence.count; i++) {
        if (stepSequence.get(i) === stepToken) {
            stepIndex = i;
            break;
        }
    }
    if (stepIndex === -1 || stepIndex >= steps.length) {
        return undefined;
    }
    return steps[stepIndex];
}
//# sourceMappingURL=workflow-context.js.map