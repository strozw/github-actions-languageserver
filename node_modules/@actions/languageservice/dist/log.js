export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Info"] = 1] = "Info";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(LogLevel || (LogLevel = {}));
const loggers = [];
let logLevel = LogLevel.Warn;
export function registerLogger(l) {
    loggers.push(l);
}
export function setLogLevel(ll) {
    logLevel = ll;
}
export function log(message) {
    if (logLevel > LogLevel.Debug) {
        return;
    }
    for (const l of loggers) {
        l.log(message);
    }
}
export function info(message) {
    if (logLevel > LogLevel.Info) {
        return;
    }
    for (const l of loggers) {
        l.info(message);
    }
}
export function warn(message) {
    if (logLevel > LogLevel.Warn) {
        return;
    }
    for (const l of loggers) {
        l.warn(message);
    }
}
export function error(message) {
    if (logLevel > LogLevel.Error) {
        return;
    }
    for (const l of loggers) {
        l.error(message);
    }
}
//# sourceMappingURL=log.js.map