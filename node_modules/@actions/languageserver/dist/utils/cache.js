export class TTLCache {
    constructor(defaultTTLinMS = 10 * 60 * 1000) {
        this.defaultTTLinMS = defaultTTLinMS;
        this.cache = new Map();
    }
    /**
     *
     * @param key Key to cache value under
     * @param ttlInMS How long is the content valid. If optional, default value will be used
     * @param getter Function to retrieve content if not in cache
     */
    async get(key, ttlInMS, getter) {
        const hasEntry = this.cache.has(key);
        const e = hasEntry && this.cache.get(key);
        if (hasEntry && e && e.cachedAt > Date.now() - (ttlInMS || this.defaultTTLinMS)) {
            return e.content;
        }
        try {
            const content = await getter();
            this.cache.set(key, {
                cachedAt: Date.now(),
                content
            });
            return content;
        }
        catch (e) {
            this.cache.delete(key);
            throw e;
        }
    }
    clear() {
        this.cache.clear();
    }
}
//# sourceMappingURL=cache.js.map