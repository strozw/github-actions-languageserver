import { actionIdentifier } from "@actions/languageservice/action";
import { error } from "@actions/languageservice/log";
import { parse } from "yaml";
import { errorMessage, errorStatus } from "./error";
export function getActionsMetadataProvider(client, cache) {
    if (!client) {
        return undefined;
    }
    return {
        fetchActionMetadata: async (action) => fetchActionMetadata(client, cache, action)
    };
}
export async function fetchActionMetadata(client, cache, action) {
    const metadata = await cache.get(`${actionIdentifier(action)}/action-metadata`, undefined, () => getActionMetadata(client, action));
    if (!metadata) {
        return undefined;
    }
    // https://docs.github.com/actions/creating-actions/metadata-syntax-for-github-actions
    return parse(metadata);
}
async function getActionMetadata(client, action) {
    let resp;
    try {
        resp = await fetchAction(client, action);
    }
    catch (e) {
        error(`Failed to fetch action metadata for ${actionIdentifier(action)}: '${errorMessage(e)}'`);
        return;
    }
    // https://docs.github.com/rest/repos/contents?apiVersion=2022-11-28
    // Ignore directories (array of files) and non-file content
    if (resp.data === undefined || Array.isArray(resp.data) || resp.data.type !== "file") {
        return undefined;
    }
    if (resp.data.content === undefined) {
        return undefined;
    }
    return Buffer.from(resp.data.content, "base64").toString("utf8");
}
async function fetchAction(client, action) {
    try {
        return await client.repos.getContent({
            owner: action.owner,
            repo: action.name,
            ref: action.ref,
            path: action.path ? `${action.path}/action.yml` : "action.yml"
        });
    }
    catch (e) {
        // If action.yml doesn't exist, try action.yaml
        if (errorStatus(e) === 404) {
            return await client.repos.getContent({
                owner: action.owner,
                repo: action.name,
                ref: action.ref,
                path: action.path ? `${action.path}/action.yaml` : "action.yaml"
            });
        }
        else {
            throw e;
        }
    }
}
//# sourceMappingURL=action-metadata.js.map