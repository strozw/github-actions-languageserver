import { parseActionReference } from "@actions/languageservice/action";
import { isActionStep } from "@actions/workflow-parser/model/type-guards";
import { fetchActionMetadata } from "../utils/action-metadata";
export async function getActionInputs(client, cache, action) {
    return (await fetchActionMetadata(client, cache, action))?.inputs;
}
export async function getActionInputValues(client, cache, context) {
    if (!context.step || !isActionStep(context.step)) {
        return [];
    }
    const action = parseActionReference(context.step.uses.value);
    if (!action) {
        return [];
    }
    const inputs = await getActionInputs(client, cache, action);
    if (!inputs) {
        return [];
    }
    return Object.entries(inputs).map(([inputName, input]) => {
        return {
            label: inputName,
            description: input.description,
            insertText: `${inputName}: `,
            deprecated: input.deprecationMessage !== undefined
        };
    });
}
//# sourceMappingURL=action-inputs.js.map